import React, { useState } from 'react';
import axios from 'axios';
import Modal from '../Common/Modal';
import AIActions from '../AIActions/AIActions';

const API_URL = 'http://localhost:5000/api';

const NoteItem = ({ note, onEdit, onDelete, onFetchNotes }) => {
  const [isSummarizing, setIsSummarizing] = useState(false);
  const [modal, setModal] = useState({ isOpen: false, title: '', message: '', type: 'info' });

  const showModal = (title, message, type = 'info') => {
    setModal({ isOpen: true, title, message, type });
  };

  const closeModal = () => {
    setModal({ isOpen: false, title: '', message: '', type: 'info' });
  };

  const formatDate = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const handleSummarize = async () => {
    if (note.content.length < 50) {
      showModal('Content Too Short', 'Note content is too short for summarization. Minimum 50 characters required.', 'error');
      return;
    }

    setIsSummarizing(true);
    try {
      await axios.post(`${API_URL}/notes/${note._id}/summarize`);
      onFetchNotes();
      showModal('Success', 'Summary generated successfully!', 'success');
    } catch (error) {
      console.error('Error generating summary:', error);
      showModal(
        'Error', 
        error.response?.data?.message || 'Failed to generate summary. Please try again.',
        'error'
      );
    } finally {
      setIsSummarizing(false);
    }
  };

  return (
    <>
      <div className="note-card">
        {/* Note Header */}
        <div className="note-header">
          <h3 className="note-title">{note.title}</h3>
          <div className="note-actions">
            <button 
              className="btn btn-outline btn-sm"
              onClick={() => onEdit(note)}
              title="Edit note"
            >
              Edit
            </button>
            <button 
              className="btn btn-danger btn-sm"
              onClick={() => onDelete(note._id, note.title)}
              title="Delete note"
            >
              Delete
            </button>
          </div>
        </div>

        {/* Tags */}
        {note.tags && note.tags.length > 0 && (
          <div className="note-tags">
            {note.tags.map((tag, index) => (
              <span key={index} className="note-tag">
                {tag}
              </span>
            ))}
          </div>
        )}

        {/* Note Content */}
        <div className="note-content">
          {note.content}
        </div>

        {/* AI Summary (if exists) */}
        {note.summary && (
          <div className="note-summary">
            <span className="note-summary-label">AI Summary:</span>
            {note.summary}
          </div>
        )}

        {/* AI Actions */}
        <AIActions 
          note={note}
          onSummarize={handleSummarize}
          isSummarizing={isSummarizing}
          onFetchNotes={onFetchNotes}
        />

        {/* Note Footer */}
        <div className="note-footer">
          <span className="note-date" title={`Created: ${formatDate(note.createdAt)}`}>
            Updated: {formatDate(note.updatedAt)}
          </span>
          
          {note.isAISummary && (
            <span className="ai-badge" title="This summary was generated by AI">
              ðŸ¤– AI
            </span>
          )}
        </div>
      </div>

      <Modal
        isOpen={modal.isOpen}
        onClose={closeModal}
        title={modal.title}
        message={modal.message}
        type={modal.type}
      />
    </>
  );
};

export default NoteItem;